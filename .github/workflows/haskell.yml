name: Haskell CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-haskell@v1
      with:
        ghc-version: '8.10.3'
        cabal-version: '3.2'

    - name: Cache
      uses: actions/cache@v3
      env:
        cache-name: cache-cabal
      with:
        path: ~/.cabal
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install dependencies
      run: |
        cabal update
        cabal build --only-dependencies --enable-tests --enable-benchmarks
    - name: Build
      run: cabal build --enable-tests --enable-benchmarks all
    - name: Run tests
      run: cabal test all
    # Existing build and test steps here

    - name: Generate Binary
      run: cabal install --installdir=. --install-method=copy
      # Replace the above command with the appropriate command to generate your binary. 
      # Ensure the binary is placed in a known directory.

    - name: Upload Binary as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: my-haskell-app
        path: path/to/your/binary
        # Replace "path/to/your/binary" with the actual path to the binary generated in the previous step

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./path/to/your/binary
        asset_name: my-haskell-app-binary
        asset_content_type: application/octet-stream



